{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Create the required foxcorporations.com api nodes.",
  "Parameters" : {
    "VPCDNS" : {
      "Type" : "String",
      "Description" : "Enable VPC DNS support.",
      "Default" : "true",
      "AllowedValues" : [ "true", "false"]
    },
    "VPCCIDR" : {
      "Type" : "String",
      "Description" : "VPC CIDR Block.",
      "Default" : "10.0.0.0/16",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    },
    "VPCRegion" : {
      "Type" : "String",
      "Description" : "Region",
      "Default" : "us-west-2"
    },
    "VPCSubnetACIDR" : {
      "Type" : "String",
      "Description" : "VPC Subnet A CIDR Block.",
      "Default" : "10.0.10.0/24",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    },
    "VPCSubnetBCIDR" : {
      "Type" : "String",
      "Description" : "VPC Subnet B CIDR Block.",
      "Default" : "10.0.20.0/24",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    },
    "VPCSubnetCCIDR" : {
      "Type" : "String",
      "Description" : "VPC Subnet C CIDR Block.",
      "Default" : "10.0.30.0/24",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    }
  },
  "Resources" : {
    "FoxCorporationsApiVPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Ref" : "VPCCIDR" },
        "EnableDnsSupport" : { "Ref" : "VPCDNS" },
        "EnableDnsHostnames" : { "Ref" : "VPCDNS" },
        "InstanceTenancy" : "default",
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } }
        ]
      }
    },
    "FoxCorporationsApiVPCSubnetA" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : {"Fn::Join" : [ "", [ {"Ref" : "VPCRegion"}, "a" ] ]},
        "CidrBlock" : {"Ref" : "VPCSubnetACIDR"},
        "VpcId" : { "Ref" : "FoxCorporationsApiVPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } }
        ]
      }
    },
    "FoxCorporationsApiVPCSubnetB" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : {"Fn::Join" : [ "", [ {"Ref" : "VPCRegion"}, "b" ] ]},
        "CidrBlock" : {"Ref" : "VPCSubnetBCIDR"},
        "VpcId" : { "Ref" : "FoxCorporationsApiVPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } }
        ]
      }
    },
    "FoxCorporationsApiVPCSubnetC" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : {"Fn::Join" : [ "", [ {"Ref" : "VPCRegion"}, "c" ] ]},
        "CidrBlock" : {"Ref" : "VPCSubnetCCIDR"},
        "VpcId" : { "Ref" : "FoxCorporationsApiVPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } }
        ]
      }
    },
    "FoxCorporationsApiInternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } }
        ]
      }
    },
    "FoxCorporationsApiGatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "FoxCorporationsApiVPC" },
         "InternetGatewayId" : { "Ref" : "FoxCorporationsApiInternetGateway" }
       }
    },
    "FoxCorporationsApiPublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "FoxCorporationsApiVPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "FoxCorporationsApiPublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "FoxCorporationsApiGatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "FoxCorporationsApiPublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "FoxCorporationsApiInternetGateway" }
      }
    },
    "FoxCorporationsApiSubnetARouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "FoxCorporationsApiVPCSubnetA" },
        "RouteTableId" : { "Ref" : "FoxCorporationsApiPublicRouteTable" }
      }
    },
    "FoxCorporationsApiSubnetBRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "FoxCorporationsApiVPCSubnetB" },
        "RouteTableId" : { "Ref" : "FoxCorporationsApiPublicRouteTable" }
      }
    },
    "FoxCorporationsApiSubnetCRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "FoxCorporationsApiVPCSubnetC" },
        "RouteTableId" : { "Ref" : "FoxCorporationsApiPublicRouteTable" }
      }
    },
    "FoxCorporationsApiELBSG" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" :
      {
        "GroupDescription" : "FoxCorporations API ELB SG",
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ],
        "SecurityGroupEgress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ],
        "VpcId" : { "Ref" : "FoxCorporationsApiVPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } }
        ]
      }
    },
    "FoxCorporationsApiELB" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "CrossZone" : "true",
        "SecurityGroups" : [ { "Ref" : "FoxCorporationsApiELBSG" } ],
        "Subnets" : [ { "Ref" : "FoxCorporationsApiVPCSubnetA" },{ "Ref" : "FoxCorporationsApiVPCSubnetB" },{ "Ref" : "FoxCorporationsApiVPCSubnetC" } ],
        "Listeners" : [ { "LoadBalancerPort" : "80", "InstancePort" : "80", "Protocol" : "HTTP" } ],
        "HealthCheck" : {
          "Target" : "HTTP:80/",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "90",
          "Timeout" : "60"
        }
      }
    },
    "FoxCorporationsApiEC2SG" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" :
      {
        "GroupDescription" : "FoxCorporations API EC2 SG",
        "SecurityGroupIngress" : [],
        "VpcId" : { "Ref" : "FoxCorporationsApiVPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } }
        ]
      }
    },
    "FoxCorporationsApiSubnetAASG" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn" : "FoxCorporationsApiPublicRoute",
      "Properties" : {
        "AvailabilityZones" : [ { "Fn::GetAtt" : [ "FoxCorporationsApiVPCSubnetA", "AvailabilityZone" ] } ],
        "VPCZoneIdentifier" : [{ "Ref" : "FoxCorporationsApiVPCSubnetA" }],
        "LaunchConfigurationName" : { "Ref" : "FoxCorporationsApiLaunchConfig"  },
        "MinSize" : "1",
        "MaxSize" : "1",
        "DesiredCapacity" : "1",
        "LoadBalancerNames" : [ { "Ref" : "FoxCorporationsApiELB" } ],
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" }, "PropagateAtLaunch" : "true" }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT45M",
          "Count"   : "1"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT5M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "FoxCorporationsApiLaunchConfig"  : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "screen" : []
              }
            },
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.WebServerLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource FoxCorporationsApiLaunchConfig ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                              "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
              }
            }
          }
        }
      },
      "Properties" : {
        "ImageId"        : "ami-b5a7ea85",
        "SecurityGroups" : [ { "Ref" : "FoxCorporationsApiEC2SG" } ],
        "InstanceType"   : "t2.micro",
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "yum update -y aws-cfn-bootstrap\n",
          "# Install the sample application\n",
          "/opt/aws/bin/cfn-init -v ",
          "    --stack ", { "Ref" : "AWS::StackId" },
          "    --resource FoxCorporationsApiLaunchConfig ",
          "    --region ", { "Ref" : "AWS::Region" }, "\n",
          "# Signal copletion\n",
          "/opt/aws/bin/cfn-signal -e $? ",
          "    --stack ", { "Ref" : "AWS::StackId" },
          "    --resource FoxCorporationsApiASG ",
          "    --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    }
  },
  "Outputs" : {
    "CloudFormationStackID": {
      "Description": "FoxCorporations API Stack",
      "Value": { "Ref" : "AWS::StackId" }
    }
  }
}
